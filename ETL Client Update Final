USE [ADMINDBA]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

----------------------------------------------------------------------------------
-- Procedure Name : dbo.ETLClientUpdate
-- Description    : 
--   This stored procedure performs ETL client updates in the following steps:
--     1. Clears previous Message, EventDate, Status, and JobName columns.
--     2. Updates each active client with the latest SQL Agent job run info.
--     3. Logs all clients (Success / Failed / Null) into dbo.ETLFailedLog with RunID and StatusType.
--     4a. Runs one-time database initialization (keys, certs, master key) per Database.
--     4b. Executes ETL configuration insert + job start for each failed client.
--     5. Sends an HTML email report for failed/null clients for the current run only.
--     6. Deletes logs older than 10 days.
--
-- Owner          : Meeth Dharod
-- Created On     : 2025-09-05
-- Last Modified  : 2025-09-30
----------------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE [dbo].[ETLClientUpdate]
AS
BEGIN
    SET NOCOUNT ON;

    ----------------------------------------------------------------------------------
    -- Step 0: Ensure logging table exists with StatusType
    ----------------------------------------------------------------------------------
    IF OBJECT_ID('dbo.ETLFailedLog', 'U') IS NULL
    BEGIN
        CREATE TABLE dbo.ETLFailedLog (
            LogID INT IDENTITY(1,1) PRIMARY KEY,
            ClientCode NVARCHAR(50),
            DatabaseName SYSNAME,
            JobName NVARCHAR(128),
            ServerName NVARCHAR(128),
            Message NVARCHAR(MAX),
            Status NVARCHAR(20),
            StatusType NVARCHAR(20), -- New column to track source
            EventDate DATETIME DEFAULT GETDATE(),
            RunID UNIQUEIDENTIFIER,
            LoggedOn DATETIME DEFAULT GETDATE()
        );
    END

    ----------------------------------------------------------------------------------
    -- Step 1: Clear columns in ETLClientInfo
    ----------------------------------------------------------------------------------
    UPDATE dbo.ETLClientInfo
    SET Message   = NULL,
        EventDate = NULL,
        Status    = NULL,
        JobName   = NULL;

    ----------------------------------------------------------------------------------
    -- Step 2: Update ETLClientInfo with last run per job
    ----------------------------------------------------------------------------------
    UPDATE T
    SET 
        T.JobName   = SJ.name,
        T.Message   = SJH.message,
        T.EventDate = DATEADD(S, 
                        (SJH.run_time / 10000) * 60 * 60 + 
                        ((SJH.run_time - (SJH.run_time / 10000) * 10000) / 100) * 60 + 
                        (SJH.run_time - (SJH.run_time / 100) * 100), 
                        CONVERT(DATETIME, RTRIM(SJH.run_date), 113)),
        T.Status    = CASE 
                        WHEN SJH.run_status = 0 THEN 'Failed'
                        WHEN SJH.run_status = 1 THEN 'Succeeded'
                        WHEN SJH.run_status = 2 THEN 'Retry'
                        WHEN SJH.run_status = 3 THEN 'Cancelled'
                        ELSE 'Null'
                      END
    FROM dbo.ETLClientInfo T
    JOIN msdb..sysjobs SJ
        ON SJ.name LIKE '%' + T.ClientCode + '%'
    CROSS APPLY (
        SELECT TOP 1 *
        FROM msdb..sysjobhistory H
        WHERE H.job_id = SJ.job_id
          AND H.step_id = 0
        ORDER BY H.run_date DESC, H.run_time DESC
    ) SJH
    WHERE SJ.name LIKE 'DXRA%'
      AND T.IsActive = 1;

    ----------------------------------------------------------------------------------
    -- Step 3: Log ALL Clients (Success / Failed / Null) for this run
    ----------------------------------------------------------------------------------
    DECLARE @RunID UNIQUEIDENTIFIER = NEWID();

    INSERT INTO dbo.ETLFailedLog 
        (ClientCode, DatabaseName, JobName, ServerName, Message, Status, StatusType, EventDate, RunID)
    SELECT 
        ClientCode, DatabaseName, JobName, ServerName, Message,
        ISNULL(Status, 'Null') AS Status,
        'Baseline' AS StatusType, -- Mark baseline row
        ISNULL(EventDate, GETDATE()),
        @RunID
    FROM dbo.ETLClientInfo
    WHERE IsActive = 1;

    ----------------------------------------------------------------------------------
    -- Step 4a: One-time Database Initialization (per DatabaseName)
    ----------------------------------------------------------------------------------
    DECLARE @InitSQL NVARCHAR(MAX) = N'';

    SELECT @InitSQL = STRING_AGG(
    N'
    BEGIN TRY
        USE ' + QUOTENAME(DatabaseName) + N';

        IF EXISTS (SELECT * FROM sys.symmetric_keys WHERE name = ''FTPPSWDKey'')
            DROP SYMMETRIC KEY FTPPSWDKey;

        IF EXISTS (SELECT * FROM sys.certificates WHERE name = ''CertificateETLFTP'')
            DROP CERTIFICATE CertificateETLFTP;

        IF EXISTS (SELECT * FROM sys.symmetric_keys WHERE name = ''##MS_DatabaseMasterKey##'')
            DROP MASTER KEY;

        DECLARE @ReturnMessage NVARCHAR(MAX);
        EXEC [dbo].[BI_spCreateCertificateKey] @ReturnMessage OUTPUT;

    END TRY
    BEGIN CATCH
        INSERT INTO dbo.ETLFailedLog 
            (ClientCode, DatabaseName, JobName, ServerName, Message, Status, StatusType, EventDate, RunID, LoggedOn)
        VALUES (
            NULL, -- no specific client for init
            ''' + REPLACE(DatabaseName, '''', '''''') + N''', 
            NULL, 
            ''' + REPLACE(ServerName, '''', '''''') + N''', 
            ERROR_MESSAGE(),
            ''Failed-Init'',
            ''FailedInit'',
            GETDATE(),
            @RunID,
            GETDATE()
        );
    END CATCH
', CHAR(13)+CHAR(10))
    FROM (SELECT DISTINCT DatabaseName, ServerName FROM dbo.ETLClientInfo WHERE Status = 'Failed' AND IsActive = 1) X;

    IF @InitSQL IS NOT NULL
        EXEC sp_executesql @InitSQL;

    ----------------------------------------------------------------------------------
    -- Step 4b: Per Client Execution (always run for each failed client)
    ----------------------------------------------------------------------------------
    DECLARE @ClientSQL NVARCHAR(MAX) = N'';

    SELECT @ClientSQL = STRING_AGG(
    N'
    BEGIN TRY
        USE ' + QUOTENAME(DatabaseName) + N';

        EXEC [dbo].[BI_spETLConfigurationInsert] 
            @clientid    = ''' + REPLACE(ClientCode, '''', '''''') + ''',
            @FtpPassword = ''' + REPLACE(ISNULL(Pwd, ''), '''', '''''') + '''; 

        USE msdb;
        EXEC msdb.dbo.sp_start_job @job_name = ' + QUOTENAME(JobName, '''') + N';

    END TRY
    BEGIN CATCH
        INSERT INTO dbo.ETLFailedLog 
            (ClientCode, DatabaseName, JobName, ServerName, Message, Status, StatusType, EventDate, RunID, LoggedOn)
        VALUES (
            ''' + REPLACE(ClientCode, '''', '''''') + N''', 
            ''' + REPLACE(DatabaseName, '''', '''''') + N''', 
            ''' + REPLACE(JobName, '''', '''''') + N''', 
            ''' + REPLACE(ServerName, '''', '''''') + N''', 
            ERROR_MESSAGE(),
            ''Failed-Client'',
            ''FailedClient'',
            GETDATE(),
            @RunID,
            GETDATE()
        );
    END CATCH
', CHAR(13)+CHAR(10))
    FROM dbo.ETLClientInfo
    WHERE Status = 'Failed' AND IsActive = 1;

    IF @ClientSQL IS NOT NULL
        EXEC sp_executesql @ClientSQL;

    ----------------------------------------------------------------------------------
    -- Step 5: Send HTML Email Only for Failed/Null Clients for this run
    ----------------------------------------------------------------------------------
    IF EXISTS (SELECT 1 FROM dbo.ETLFailedLog WHERE RunID = @RunID AND Status <> 'Succeeded')
    BEGIN
        DECLARE @body NVARCHAR(MAX);
        DECLARE @ServerNames NVARCHAR(MAX);
        DECLARE @subject NVARCHAR(512);

        SELECT @ServerNames = STRING_AGG(ServerName, ', ')
        FROM (SELECT DISTINCT ServerName FROM dbo.ETLFailedLog WHERE RunID = @RunID AND Status <> 'Succeeded') AS T;

        SET @body = 
        N'<h3>ETL Execution Report - Failed Clients</h3>' +
        N'<table border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse;">' +
        N'<tr style="background-color:lightblue;">
<th>ClientCode</th><th>ServerName</th><th>DatabaseName</th>
<th>JobName</th><th>Message</th><th>Status</th><th>StatusType</th><th>EventDate</th></tr>' +
        (
            SELECT STRING_AGG(
                N'<tr><td>' + ISNULL(ClientCode, '') + N'</td>' +
                N'<td>' + ISNULL(ServerName, '') + N'</td>' +
                N'<td>' + ISNULL(DatabaseName, '') + N'</td>' +
                N'<td>' + ISNULL(JobName, '') + N'</td>' +
                N'<td>' + ISNULL(Message, '') + N'</td>' +
                N'<td>' + ISNULL(Status, '') + N'</td>' +
                N'<td>' + ISNULL(StatusType, '') + N'</td>' +
                N'<td>' + ISNULL(CONVERT(VARCHAR(20), EventDate, 120), '') + N'</td></tr>'
            , CHAR(13)+CHAR(10))
            FROM dbo.ETLFailedLog
            WHERE RunID = @RunID AND Status <> 'Succeeded'
        );

        SET @body = @body + N'</table>';

        SET @subject = N'ETL Execution Report - Failed Clients Only'
                       + CASE WHEN @ServerNames IS NOT NULL THEN N' | Servers: ' + @ServerNames ELSE N'' END;

        EXEC msdb.dbo.sp_send_dbmail
            @profile_name = 'DBA',
            @recipients   = 'luiza.vladescu@Fisglobal.com;meeth.dharod@Fisglobal.com;shivam.gupta3@fisglobal.com',
            @subject      = @subject,
            @body         = @body,
            @body_format  = 'HTML';
    END

    ----------------------------------------------------------------------------------
    -- Step 6: Cleanup Old Data (>10 days)
    ----------------------------------------------------------------------------------
    DELETE FROM dbo.ETLFailedLog
    WHERE LoggedOn < DATEADD(DAY, -10, GETDATE());

END
GO
