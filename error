-- Temp table to collect results
IF OBJECT_ID('tempdb..#ETLResults') IS NOT NULL
    DROP TABLE #ETLResults;

CREATE TABLE #ETLResults
(
    DatabaseName SYSNAME,
    ConfigurationName NVARCHAR(200),
    ConfigurationValue NVARCHAR(MAX),
    ftpPassword NVARCHAR(MAX)
);

DECLARE @db NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR
SELECT name
FROM sys.databases
WHERE database_id > 4;  -- skip system DBs

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = '
    USE ' + QUOTENAME(@db) + ';
    
    IF OBJECT_ID(''dbo.ETL_configuration'', ''U'') IS NOT NULL
       AND EXISTS (
           SELECT 1 
           FROM sys.columns 
           WHERE object_id = OBJECT_ID(''dbo.ETL_configuration'')
             AND name IN (''ConfigurationName'', ''ConfigurationValue'', ''ConfigurationEncrypted'')
       )
    BEGIN
        INSERT INTO tempdb..#ETLResults (DatabaseName, ConfigurationName, ConfigurationValue, ftpPassword)
        SELECT
            ''' + @db + ''' AS DatabaseName,
            ConfigurationName,
            ConfigurationValue,
            CONVERT(NVARCHAR(MAX),
                DECRYPTBYKEYAUTOCERT(CERT_ID(''CertificateETLFTP''), NULL, ConfigurationEncrypted)
            ) AS ftpPassword
        FROM dbo.ETL_configuration
        WHERE ConfigurationName IN (''ClientID'', ''ftpPassword'', ''dbLevel'', ''ftpUserName'');
    END
    ELSE
    BEGIN
        INSERT INTO tempdb..#ETLResults (DatabaseName, ConfigurationName, ConfigurationValue, ftpPassword)
        VALUES (''' + @db + ''', NULL, NULL, NULL);
    END';

    EXEC sp_executesql @sql;

    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Final result
SELECT *
FROM #ETLResults
ORDER BY DatabaseName, ConfigurationName;
