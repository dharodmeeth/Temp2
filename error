-- Step 1: Cursor Setup (curDB2)
DECLARE curDB2 CURSOR FORWARD_ONLY STATIC
FOR  
    SELECT [name]   
    FROM sys.databases 
    WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
      AND name NOT LIKE '%SP'
      AND name NOT LIKE '%snapshot%'
      AND name NOT LIKE '%stg'
      AND name NOT LIKE '%_old'
      AND state_desc NOT LIKE '%RESTORING%'
    ORDER BY [name];

OPEN curDB2  
FETCH NEXT FROM curDB2 INTO @DB  

WHILE @@FETCH_STATUS = 0  
BEGIN 
    BEGIN TRY
        -- Step 4 & 5: Check if ETL_Configuration table exists
        IF OBJECT_ID('['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
        BEGIN 
            -- Check if SourceCode column exists
            SET @SourceColExists = 0;
            IF COL_LENGTH('['+@DB+'].dbo.ETL_Configuration', 'SourceCode') IS NOT NULL
                SET @SourceColExists = 1;

            -- Step 6a: Insert decrypted passwords from ETLTempTable where ftppass IS NOT NULL
            SET @sql = N'
            INSERT INTO admindba.dbo.ETLClientInfo (DatabaseName, ClientCode, PasswordHash, pwd)
            SELECT 
                DatabaseName,
                ClientCode,
                CONVERT(VARBINARY(256), ftppass) AS PasswordHash,
                ftppass AS pwd
            FROM admindba.dbo.ETLTempTable
            WHERE ftppass IS NOT NULL;';
            EXEC (@sql);

            -- Step 6b: Merge to update ftpUserName, ServerName, IsActive
            IF @SourceColExists = 1
            BEGIN
                -- When SourceCode column exists
                SET @sql = N'
                MERGE admindba.dbo.ETLClientInfo AS target
                USING (
                    SELECT 
                        SourceCode AS ClientCode,
                        (SELECT TOP 1 ConfigurationValue FROM dbo.ETL_Configuration WHERE ConfigurationName = ''ftpUserName'') AS FtpUserName,
                        CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
                        1 AS IsActive
                    FROM dbo.ETL_Configuration
                    WHERE ISNULL(LTRIM(RTRIM(SourceCode)), '''') <> ''''
                ) AS source
                ON (target.ClientCode = source.ClientCode)
                WHEN MATCHED THEN
                    UPDATE SET 
                        target.FtpUserName = source.FtpUserName,
                        target.ServerName  = source.ServerName,
                        target.IsActive    = source.IsActive
                WHEN NOT MATCHED THEN
                    INSERT (ClientCode, FtpUserName, ServerName, IsActive)
                    VALUES (source.ClientCode, source.FtpUserName, source.ServerName, source.IsActive);';
            END
            ELSE
            BEGIN
                -- When SourceCode column does NOT exist, or empty â†’ use ClientID from ConfigurationValue
                SET @sql = N'
                MERGE admindba.dbo.ETLClientInfo AS target
                USING (
                    SELECT 
                        (SELECT TOP 1 ConfigurationValue FROM dbo.ETL_Configuration WHERE ConfigurationName LIKE ''ClientID%'') AS ClientCode,
                        (SELECT TOP 1 ConfigurationValue FROM dbo.ETL_Configuration WHERE ConfigurationName = ''ftpUserName'') AS FtpUserName,
                        CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
                        1 AS IsActive
                ) AS source
                ON (target.ClientCode = source.ClientCode)
                WHEN MATCHED THEN
                    UPDATE SET 
                        target.FtpUserName = source.FtpUserName,
                        target.ServerName  = source.ServerName,
                        target.IsActive    = source.IsActive
                WHEN NOT MATCHED THEN
                    INSERT (ClientCode, FtpUserName, ServerName, IsActive)
                    VALUES (source.ClientCode, source.FtpUserName, source.ServerName, source.IsActive);';
            END;

            EXEC (@sql);
        END
    END TRY
    BEGIN CATCH
        PRINT 'Error processing database: ' + @DB + ' | ' + ERROR_MESSAGE();
    END CATCH

    FETCH NEXT FROM curDB2 INTO @DB  
END  

CLOSE curDB2  
DEALLOCATE curDB2;

-- Step 7: Cleanup staging
TRUNCATE TABLE admindba.dbo.ETLTempTable;

-- Step 8: Final verification
SELECT * FROM admindba.dbo.ETLClientInfo;
