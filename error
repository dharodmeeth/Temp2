-- Step 2: Merge multiple ClientCodes per DB
DECLARE curDB2 CURSOR FOR  
   SELECT [name]   
   FROM master..sysdatabases 
   WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
     AND name NOT LIKE '%SP'
     AND name NOT LIKE '%snapshot%'
     AND name NOT LIKE '%stg'
   ORDER BY [name];

OPEN curDB2  
FETCH NEXT FROM curDB2 INTO @DB  
WHILE @@FETCH_STATUS = 0  
BEGIN
    IF OBJECT_ID(N'['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
    BEGIN 
        DECLARE @ClientCode NVARCHAR(50);

        DECLARE curClient CURSOR FOR
        SELECT ConfigurationValue
        FROM ['+@DB+'].dbo.ETL_Configuration
        WHERE ConfigurationName = 'ClientID';

        OPEN curClient
        FETCH NEXT FROM curClient INTO @ClientCode
        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- Merge each ClientCode individually
            SET @sql = N'
            MERGE admindba.dbo.ETLClientInfo AS target
            USING (
                SELECT
                    '''+@ClientCode+''' AS ClientCode,
                    (SELECT TOP 1 ConfigurationValue 
                     FROM ['+@DB+'].dbo.ETL_Configuration 
                     WHERE ConfigurationName = ''ftpUserName'') AS FtpUserName,
                    (SELECT TOP 1 ftppass 
                     FROM admindba.dbo.mytest 
                     WHERE dbname = '''+@DB+''') AS pwd,
                    (SELECT TOP 1 CONVERT(VARBINARY(256), ftppass) 
                     FROM admindba.dbo.mytest 
                     WHERE dbname = '''+@DB+''') AS PasswordHash,
                    '''+@DB+''' AS DatabaseName,
                    CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
                    (SELECT c.ClientName
                     FROM admindba.dbo.Client c
                     WHERE c.IsActive = 1
                       AND LEFT('''+@DB+''', LEN(c.ClientDBPrefix)) = c.ClientDBPrefix
                    ) AS ClientName,
                    SYSUTCDATETIME() AS EventDate,
                    1 AS IsActive
            ) AS source
            ON (target.ClientCode = source.ClientCode AND target.DatabaseName = source.DatabaseName)
            WHEN MATCHED THEN
                UPDATE SET 
                    target.FtpUserName  = source.FtpUserName,
                    target.pwd          = source.pwd,
                    target.PasswordHash = source.PasswordHash,
                    target.ServerName   = source.ServerName,
                    target.ClientName   = source.ClientName,
                    target.EventDate    = source.EventDate,
                    target.IsActive     = source.IsActive
            WHEN NOT MATCHED THEN
                INSERT (ClientCode, FtpUserName, pwd, PasswordHash, DatabaseName, ServerName, ClientName, EventDate, IsActive)
                VALUES (source.ClientCode, source.FtpUserName, source.pwd, source.PasswordHash, source.DatabaseName, source.ServerName, source.ClientName, source.EventDate, source.IsActive);';

            EXEC (@sql);

            FETCH NEXT FROM curClient INTO @ClientCode
        END
        CLOSE curClient
        DEALLOCATE curClient
    END

    FETCH NEXT FROM curDB2 INTO @DB
END
CLOSE curDB2
DEALLOCATE curDB2;

-- Final review
SELECT * FROM admindba.dbo.ETLClientInfo;
