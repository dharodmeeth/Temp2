-- Temp table to collect results
IF OBJECT_ID('tempdb..#ETLResults') IS NOT NULL
    DROP TABLE #ETLResults;

CREATE TABLE #ETLResults
(
    DatabaseName SYSNAME,
    ClientID NVARCHAR(4000),
    ftpUserName NVARCHAR(4000),
    ftpPassword NVARCHAR(MAX),
    dbLevel NVARCHAR(4000)
);

DECLARE @db  NVARCHAR(128);
DECLARE @sql NVARCHAR(MAX);

-- Loop all user DBs (skip system DBs)
DECLARE db_cursor CURSOR FOR
SELECT name
FROM sys.databases
WHERE database_id > 4;

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @db;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = '
    IF EXISTS (
        SELECT 1
        FROM ' + QUOTENAME(@db) + '.sys.tables
        WHERE name = ''ETL_configuration''
    )
    BEGIN
        BEGIN TRY
            INSERT INTO #ETLResults (DatabaseName, ClientID, ftpUserName, ftpPassword, dbLevel)
            SELECT
                ''' + @db + ''' AS DatabaseName,
                MAX(CASE WHEN ConfigurationName = ''ClientID''
                         THEN ConfigurationValue END) AS ClientID,
                MAX(CASE WHEN ConfigurationName = ''ftpUserName''
                         THEN ConfigurationValue END) AS ftpUserName,
                MAX(CASE WHEN ConfigurationName = ''ftpPassword''
                         THEN CONVERT(NVARCHAR(MAX),
                                      DECRYPTBYKEYAUTOCERT(CERT_ID(''CertificateETLFTP''), NULL, ConfigurationEncrypted)) END) AS ftpPassword,
                MAX(CASE WHEN ConfigurationName = ''dbLevel''
                         THEN ConfigurationValue END) AS dbLevel
            FROM ' + QUOTENAME(@db) + '.dbo.ETL_configuration
            WHERE ConfigurationName IN (''ClientID'', ''ftpUserName'', ''ftpPassword'', ''dbLevel'');
        END TRY
        BEGIN CATCH
            -- If decryption fails, still insert row (password NULL)
            INSERT INTO #ETLResults (DatabaseName, ClientID, ftpUserName, ftpPassword, dbLevel)
            SELECT
                ''' + @db + ''' AS DatabaseName,
                MAX(CASE WHEN ConfigurationName = ''ClientID''
                         THEN ConfigurationValue END) AS ClientID,
                MAX(CASE WHEN ConfigurationName = ''ftpUserName''
                         THEN ConfigurationValue END) AS ftpUserName,
                NULL AS ftpPassword,
                MAX(CASE WHEN ConfigurationName = ''dbLevel''
                         THEN ConfigurationValue END) AS dbLevel
            FROM ' + QUOTENAME(@db) + '.dbo.ETL_configuration
            WHERE ConfigurationName IN (''ClientID'', ''ftpUserName'', ''ftpPassword'', ''dbLevel'');
        END CATCH
    END
    ELSE
    BEGIN
        -- Insert placeholder row for DB without ETL_configuration
        INSERT INTO #ETLResults (DatabaseName, ClientID, ftpUserName, ftpPassword, dbLevel)
        VALUES (''' + @db + ''', NULL, NULL, NULL, NULL);
    END';

    EXEC sp_executesql @sql;
    FETCH NEXT FROM db_cursor INTO @db;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Final output
SELECT *
FROM #ETLResults
ORDER BY DatabaseName;
