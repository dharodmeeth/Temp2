-- Temp table to collect results
IF OBJECT_ID('tempdb..#ETLResults') IS NOT NULL
    DROP TABLE #ETLResults;

CREATE TABLE #ETLResults
(
    DatabaseName SYSNAME,
    ClientID NVARCHAR(200),
    ftpUserName NVARCHAR(4000),
    ftpPassword NVARCHAR(MAX),
    dbLevel NVARCHAR(4000)
);

DECLARE @db NVARCHAR(128)
DECLARE @sql NVARCHAR(MAX)

-- Cursor through all user databases
DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases 
WHERE database_id > 4  -- exclude system DBs (master, model, msdb, tempdb)

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @db  

WHILE @@FETCH_STATUS = 0  
BEGIN  
    SET @sql = '
    IF EXISTS (SELECT 1 
               FROM ' + QUOTENAME(@db) + '.sys.tables 
               WHERE name = ''ETL_configuration'')
    BEGIN
        INSERT INTO #ETLResults (DatabaseName, ClientID, ftpUserName, ftpPassword, dbLevel)
        SELECT 
            ''' + @db + ''' AS DatabaseName,
            MAX(ClientID) AS ClientID,
            MAX(CASE WHEN ConfigurationName = ''ftpUserName'' 
                     THEN ConfigurationValue END) AS ftpUserName,
            MAX(CASE WHEN ConfigurationName = ''ftpPassword'' 
                     THEN CONVERT(NVARCHAR(MAX), 
                                  DECRYPTBYKEYAUTOCERT(CERT_ID(''CertificateETLFTP''), NULL, ConfigurationEncrypted)) END) AS ftpPassword,
            MAX(CASE WHEN ConfigurationName = ''dbLevel'' 
                     THEN ConfigurationValue END) AS dbLevel
        FROM ' + QUOTENAME(@db) + '.dbo.ETL_configuration
        WHERE ConfigurationName IN (''ftpPassword'', ''dbLevel'', ''ftpUserName'');
    END'
    
    EXEC sp_executesql @sql  
    FETCH NEXT FROM db_cursor INTO @db  
END  

CLOSE db_cursor  
DEALLOCATE db_cursor  

-- Final output
SELECT * FROM #ETLResults;
