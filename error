--------------------------------------------------------------------
-- STEP 0: Create / Clean staging table
--------------------------------------------------------------------
IF OBJECT_ID('admindba.dbo.ETLTempTable','U') IS NOT NULL DROP TABLE admindba.dbo.ETLTempTable;
CREATE TABLE admindba.dbo.ETLTempTable
(
    DatabaseName VARCHAR(100),
    ClientCode   NVARCHAR(200),
    FtpUserName  NVARCHAR(200),
    ftppass      NVARCHAR(256)
);

--------------------------------------------------------------------
-- STEP 1: Populate staging table from all databases
--------------------------------------------------------------------
DECLARE @DB sysname, @sql NVARCHAR(MAX), @DBLevel NVARCHAR(250);

DECLARE curDB CURSOR FOR
SELECT [name]
FROM sys.databases
WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin')
  AND state_desc = 'ONLINE';

OPEN curDB
FETCH NEXT FROM curDB INTO @DB
WHILE @@FETCH_STATUS = 0
BEGIN
    IF OBJECT_ID('['+@DB+'].dbo.ETL_Configuration') IS NOT NULL
    BEGIN
        SET @sql = N'
        USE '+QUOTENAME(@DB)+';

        -- Open the certificate
        OPEN MASTER KEY DECRYPTION BY CERTIFICATE CertificateETLFTP;

        INSERT INTO admindba.dbo.ETLTempTable (DatabaseName, ClientCode, FtpUserName, ftppass)
        SELECT 
            DB_NAME() AS DatabaseName,
            sc.ConfigurationValue AS ClientCode,
            un.ConfigurationValue AS FtpUserName,
            CONVERT(NVARCHAR(MAX), DECRYPTBYKEYAUTOCERT(CERT_ID(''CertificateETLFTP''), NULL, pw.ConfigurationEncrypted)) AS ftppass
        FROM dbo.ETL_Configuration sc
        INNER JOIN dbo.ETL_Configuration pw
            ON pw.ConfigurationName = ''ftpPassword''
        INNER JOIN dbo.ETL_Configuration un
            ON un.ConfigurationName = ''ftpUserName''
        WHERE sc.ConfigurationName IN (''SourceCode'',''ClientID'')
          AND pw.ConfigurationEncrypted IS NOT NULL;';

        EXEC(@sql);
    END

    FETCH NEXT FROM curDB INTO @DB
END

CLOSE curDB
DEALLOCATE curDB;

--------------------------------------------------------------------
-- STEP 2: Merge data into ETLClientInfo per database using cursor
--------------------------------------------------------------------
DECLARE curDB2 CURSOR FOR
SELECT [name]
FROM sys.databases
WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin')
  AND [name] NOT LIKE '%SP'
  AND [name] NOT LIKE '%snapshot%'
  AND [name] NOT LIKE '%stg'
ORDER BY [name];

OPEN curDB2
FETCH NEXT FROM curDB2 INTO @DB
WHILE @@FETCH_STATUS = 0
BEGIN
    IF OBJECT_ID('[' + @DB + '].dbo.ETL_Configuration') IS NOT NULL
    BEGIN
        -- Get dbLevel for this database
        SET @sql = N'SELECT TOP 1 @DBLevel = ConfigurationValue
                     FROM [' + @DB + '].dbo.ETL_Configuration
                     WHERE ConfigurationName = ''dbLevel'';';
        EXEC sp_executesql @sql, N'@DBLevel NVARCHAR(250) OUTPUT', @DBLevel=@DBLevel OUTPUT;

        IF @DBLevel IS NOT NULL
        BEGIN
            -- Merge multiple ClientCodes and ftp credentials from staging
            SET @sql = N'
MERGE admindba.dbo.ETLClientInfo AS target
USING (
    SELECT *
    FROM (
        SELECT
            sc.ConfigurationValue AS ClientCode,
            un.ConfigurationValue AS FtpUserName,
            m.ftppass AS pwd,
            CONVERT(VARBINARY(256), m.ftppass) AS PasswordHash,
            ''' + @DBLevel + ''' AS EtlVersion,
            ''' + @DB + ''' AS DatabaseName,
            CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
            cl.ClientName,
            SYSUTCDATETIME() AS EventDate,
            1 AS IsActive
        FROM [' + @DB + '].dbo.ETL_Configuration sc
        INNER JOIN [' + @DB + '].dbo.ETL_Configuration un
            ON un.ConfigurationName = ''ftpUserName''
        INNER JOIN admindba.dbo.ETLTempTable m
            ON m.ClientCode = sc.ConfigurationValue
           AND m.DatabaseName = ''' + @DB + '''
        LEFT JOIN admindba.dbo.Client cl
            ON cl.IsActive = 1
           AND LEFT(''' + @DB + ''', LEN(cl.ClientDBPrefix)) = cl.ClientDBPrefix
        WHERE sc.ConfigurationName IN (''SourceCode'',''ClientID'')
          AND m.ftppass IS NOT NULL
    ) AS src
) AS source
ON target.ClientCode = source.ClientCode
   AND target.DatabaseName = source.DatabaseName
   AND target.FtpUserName = source.FtpUserName
WHEN MATCHED THEN
    UPDATE SET
        target.pwd = source.pwd,
        target.PasswordHash = source.PasswordHash,
        target.EtlVersion = source.EtlVersion,
        target.ServerName = source.ServerName,
        target.ClientName = source.ClientName,
        target.EventDate = source.EventDate,
        target.IsActive = source.IsActive
WHEN NOT MATCHED THEN
    INSERT (ClientCode, FtpUserName, pwd, PasswordHash, EtlVersion, DatabaseName, ServerName, ClientName, EventDate, IsActive)
    VALUES (source.ClientCode, source.FtpUserName, source.pwd, source.PasswordHash, source.EtlVersion, source.DatabaseName, source.ServerName, source.ClientName, source.EventDate, source.IsActive);';

            EXEC(@sql);
        END
    END

    FETCH NEXT FROM curDB2 INTO @DB;
END

CLOSE curDB2
DEALLOCATE curDB2;

--------------------------------------------------------------------
-- STEP 3: Cleanup and final review
--------------------------------------------------------------------
TRUNCATE TABLE admindba.dbo.ETLTempTable;

SELECT *
FROM admindba.dbo.ETLClientInfo
ORDER BY DatabaseName, ClientCode;
