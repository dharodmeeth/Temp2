-- Step 1: Collect ftpPassword from all databases into mytest
DECLARE @sql NVARCHAR(max), @DBLevel NVARCHAR(250)
DECLARE @DB sysname  

DECLARE curDB CURSOR FORWARD_ONLY STATIC FOR  
   SELECT [name]   
   FROM MSDB.sys.databases 
   WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
     AND name NOT LIKE '%SP'
     AND name NOT LIKE '%snapshot%'
     AND name NOT LIKE '%stg'
	 AND name NOT LIKE '%_old'
	 AND state_desc NOT LIKE '%RESTORING%'
   ORDER BY [name];

-- Recreate staging table
IF OBJECT_ID('admindba.dbo.mytest','U') IS NOT NULL DROP TABLE admindba.dbo.mytest;
CREATE TABLE admindba.dbo.mytest
(
    dbname VARCHAR(100),
    ftppass NVARCHAR(256)
);

OPEN curDB  
FETCH NEXT FROM curDB INTO @DB  
WHILE @@FETCH_STATUS = 0  
BEGIN 
    IF OBJECT_ID(N'['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
    BEGIN 
        -- Get ftpUserName (checking DB level)
        SET @sql =N'SELECT @DBLevel=ConfigurationValue 
                     FROM ['+@DB+'].dbo.ETL_Configuration 
                     WHERE ConfigurationName LIKE ''ftpUserName'''; 
        EXECUTE sp_executesql @sql, 
            N'@DBLevel NVARCHAR(250) OUTPUT', 
            @DBLevel=@DBLevel OUTPUT;

        IF @DBLevel <> 'ftpUserName'
        BEGIN 
            -- Insert decrypted ftpPassword into staging table
            SET @sql=N'USE '+@DB+';
INSERT INTO admindba.dbo.mytest
SELECT TOP(1) DB_NAME() AS DBName,
       CONVERT(NVARCHAR(MAX), DECRYPTBYKEYAUTOCERT(CERT_ID(''CertificateETLFTP''), NULL, ConfigurationEncrypted)) AS ftppass
FROM dbo.ETL_Configuration 
WHERE ConfigurationName = ''ftpPassword'';';
            
            PRINT @sql;
            EXEC (@sql);
        END
    END 
    FETCH NEXT FROM curDB INTO @DB  
END  

CLOSE curDB  
DEALLOCATE curDB;

-- Optional: review staging table
SELECT * FROM admindba.dbo.mytest;

-- Step 2: Merge multiple ClientCodes and multiple FTP accounts per database

DECLARE curDB CURSOR FOR  
SELECT [name]   
FROM master..sysdatabases 
WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
  AND name NOT LIKE '%SP'
  AND name NOT LIKE '%snapshot%'
  AND name NOT LIKE '%stg'
ORDER BY [name];

OPEN curDB  
FETCH NEXT FROM curDB INTO @DB  
WHILE @@FETCH_STATUS = 0  
BEGIN
    IF OBJECT_ID('['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
    BEGIN 


        SET @sql = N'
        ;WITH ClientCTE AS (
            SELECT ConfigurationValue AS ClientCode
            FROM ['+@DB+'].dbo.ETL_Configuration
            WHERE ConfigurationName = ''ClientID''
        ),
        FtpCTE AS (
            SELECT ftppass, ConfigurationValue AS FtpUserName
            FROM ['+@DB+'].dbo.ETL_Configuration e
            LEFT JOIN admindba.dbo.mytest m
                ON m.dbname = '''+@DB+'''
            WHERE e.ConfigurationName = ''ftpUserName''
        )
        MERGE admindba.dbo.ETLClientInfo AS target
        USING (
            SELECT
                c.ClientCode,
                f.FtpUserName,
                f.ftppass AS pwd,
                CONVERT(VARBINARY(256), f.ftppass) AS PasswordHash,
                '''+@DB+''' AS DatabaseName,
                CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
                cl.ClientName,
                SYSUTCDATETIME() AS EventDate,
                1 AS IsActive
            FROM ClientCTE c
            CROSS JOIN FtpCTE f
            LEFT JOIN admindba.dbo.Client cl
                ON cl.IsActive = 1
                AND LEFT('''+@DB+''', LEN(cl.ClientDBPrefix)) = cl.ClientDBPrefix
        ) AS source
        ON target.ClientCode = source.ClientCode 
           AND target.DatabaseName = source.DatabaseName
           AND target.FtpUserName = source.FtpUserName
        WHEN MATCHED THEN
            UPDATE SET 
                target.pwd          = source.pwd,
                target.PasswordHash = source.PasswordHash,
                target.ServerName   = source.ServerName,
                target.ClientName   = source.ClientName,
                target.EventDate    = source.EventDate,
                target.IsActive     = source.IsActive
        WHEN NOT MATCHED THEN
            INSERT (ClientCode, FtpUserName, pwd, PasswordHash, DatabaseName, ServerName, ClientName, EventDate, IsActive)
            VALUES (source.ClientCode, source.FtpUserName, source.pwd, source.PasswordHash, source.DatabaseName, source.ServerName, source.ClientName, source.EventDate, source.IsActive);
        ';

        EXEC (@sql);
    END

    FETCH NEXT FROM curDB INTO @DB
END

CLOSE curDB
DEALLOCATE curDB;

-- Final review
SELECT * FROM admindba.dbo.ETLClientInfo;
