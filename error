DECLARE @sql NVARCHAR(MAX);
DECLARE @DB sysname;
DECLARE @DBLevel NVARCHAR(250);
DECLARE @SourceColExists BIT;

-- Step 1: Populate ETLTempTable
DECLARE curDB CURSOR FORWARD_ONLY STATIC
FOR  
    SELECT [name]   
    FROM sys.databases 
    WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
      AND name NOT LIKE '%SP'
      AND name NOT LIKE '%snapshot%'
      AND name NOT LIKE '%stg'
      AND name NOT LIKE '%_old'
      AND state_desc NOT LIKE '%RESTORING%'
    ORDER BY [name];

OPEN curDB  
FETCH NEXT FROM curDB INTO @DB  

WHILE @@FETCH_STATUS = 0  
BEGIN 
    BEGIN TRY
        IF OBJECT_ID('['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
        BEGIN 
            SET @SourceColExists = 0;
            IF COL_LENGTH('['+@DB+'].dbo.ETL_Configuration', 'SourceCode') IS NOT NULL
                SET @SourceColExists = 1;

            SET @sql = N'
            USE ['+@DB+'];
            WITH FtpPasswords AS
            (
                SELECT 
                    ConfigurationName,
                    CONVERT(NVARCHAR(MAX), DECRYPTBYKEYAUTOCERT(
                        CERT_ID(''CertificateETLFTP''), NULL, ConfigurationEncrypted
                    )) AS ftppass,
                    ROW_NUMBER() OVER (ORDER BY ConfigurationName) AS rn
                FROM dbo.ETL_Configuration
                WHERE ConfigurationName LIKE ''ftpPassword%''
            ),
            ClientCodes AS
            (
                SELECT ' + 
                    CASE WHEN @SourceColExists = 1 
                        THEN 'CASE 
                                  WHEN SourceCode IS NOT NULL AND LTRIM(RTRIM(SourceCode)) <> '''' 
                                  THEN SourceCode 
                                  ELSE (SELECT TOP 1 ConfigurationValue FROM dbo.ETL_Configuration WHERE ConfigurationName LIKE ''ClientID%'') 
                              END AS ClientCode'
                        ELSE '(SELECT TOP 1 ConfigurationValue FROM dbo.ETL_Configuration WHERE ConfigurationName LIKE ''ClientID%'') AS ClientCode'
                    END + ',
                    ROW_NUMBER() OVER (ORDER BY ConfigurationName) AS rn
                FROM dbo.ETL_Configuration
                WHERE ConfigurationName LIKE ''ftpPassword%''
            )
            INSERT INTO admindba.dbo.ETLTempTable (DatabaseName, ClientCode, ftppass)
            SELECT 
                '''+@DB+''' AS DatabaseName,
                c.ClientCode,
                f.ftppass
            FROM FtpPasswords f
            JOIN ClientCodes c ON f.rn = c.rn;';
            
            EXEC (@sql);
        END
    END TRY
    BEGIN CATCH
        PRINT ''Error processing database: ' + @DB + ' | ' + ERROR_MESSAGE();
    END CATCH

    FETCH NEXT FROM curDB INTO @DB  
END  

CLOSE curDB  
DEALLOCATE curDB;

-- Step 2: Merge into ETLClientInfo
DECLARE curDB2 CURSOR FORWARD_ONLY STATIC FOR  
   SELECT [name]   
   FROM sys.databases
   WHERE [name] NOT IN ('master','model','msdb','tempdb','DefaultDB','admindba','iws_admin') 
     AND name NOT LIKE '%SP'
     AND name NOT LIKE '%snapshot%'
     AND name NOT LIKE '%stg'
   ORDER BY [name];

OPEN curDB2  
FETCH NEXT FROM curDB2 INTO @DB  

WHILE @@FETCH_STATUS = 0  
BEGIN
    BEGIN TRY
        IF OBJECT_ID('['+@DB+'].dbo.ETL_Configuration') IS NOT NULL  
        BEGIN 
            -- Get dbLevel
            SET @sql = N'SELECT @DBLevel=ConfigurationValue 
                         FROM ['+@DB+'].dbo.ETL_Configuration 
                         WHERE ConfigurationName = ''dbLevel'';';
            EXEC sp_executesql @sql,
                N'@DBLevel NVARCHAR(250) OUTPUT',
                @DBLevel=@DBLevel OUTPUT;

            IF @DBLevel IS NOT NULL
            BEGIN 
                -- Merge into ETLClientInfo
                SET @sql = N'
                MERGE admindba.dbo.ETLClientInfo AS target
                USING (
                    SELECT *
                    FROM (
                        SELECT
                            (SELECT TOP 1 ConfigurationValue FROM ['+@DB+'].dbo.ETL_Configuration WHERE ConfigurationName = ''ClientID'') AS ClientCode,
                            (SELECT TOP 1 ConfigurationValue FROM ['+@DB+'].dbo.ETL_Configuration WHERE ConfigurationName = ''ftpUserName'') AS FtpUserName,
                            (SELECT TOP 1 ftppass FROM admindba.dbo.ETLTempTable WHERE DatabaseName = '''+@DB+''') AS pwd,
                            (SELECT TOP 1 CONVERT(VARBINARY(256), ftppass) FROM admindba.dbo.ETLTempTable WHERE DatabaseName = '''+@DB+''') AS PasswordHash,
                            '''+@DBLevel+''' AS EtlVersion,
                            '''+@DB+''' AS DatabaseName,
                            CAST(SERVERPROPERTY(''MachineName'') AS NVARCHAR(200)) AS ServerName,
                            (SELECT TOP 1 c.ClientName FROM admindba.dbo.Client c
                             WHERE c.IsActive = 1 AND LEFT('''+@DB+''', LEN(c.ClientDBPrefix)) = c.ClientDBPrefix) AS ClientName,
                            SYSUTCDATETIME() AS EventDate,
                            1 AS IsActive
                    ) AS src
                    WHERE ClientCode IS NOT NULL AND FtpUserName IS NOT NULL AND pwd IS NOT NULL
                ) AS source
                ON (target.ClientCode = source.ClientCode)
                WHEN MATCHED THEN
                    UPDATE SET 
                        target.FtpUserName  = source.FtpUserName,
                        target.pwd          = source.pwd,
                        target.PasswordHash = source.PasswordHash,
                        target.EtlVersion   = source.EtlVersion,
                        target.DatabaseName = source.DatabaseName,
                        target.ServerName   = source.ServerName,
                        target.ClientName   = source.ClientName,
                        target.EventDate    = source.EventDate,
                        target.IsActive     = source.IsActive
                WHEN NOT MATCHED THEN
                    INSERT (ClientCode, FtpUserName, pwd, PasswordHash, EtlVersion, DatabaseName, ServerName, ClientName, EventDate, IsActive)
                    VALUES (source.ClientCode, source.FtpUserName, source.pwd, source.PasswordHash, source.EtlVersion, source.DatabaseName, source.ServerName, source.ClientName, source.EventDate, source.IsActive);';

                EXEC (@sql);
            END
        END
    END TRY
    BEGIN CATCH
        PRINT 'Error processing database: ' + @DB + ' | ' + ERROR_MESSAGE();
    END CATCH

    FETCH NEXT FROM curDB2 INTO @DB
END

CLOSE curDB2
DEALLOCATE curDB2;

-- Optional: truncate staging table at end
TRUNCATE TABLE admindba.dbo.ETLTempTable;

-- Final select for verification
SELECT * FROM admindba.dbo.ETLClientInfo;
